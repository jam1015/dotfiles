-- __ _  _  _  __  _  _
--(  ( \/ )( \(  )( \/ )!*#
--/    /\ \/ / )( / \/ \!*#
--\_)__) \__/ (__)\_)(_/!*#

require('autocommands')--~/.config/nvim/lua/autocommands.lua
require('keymaps')       -- ~/.config/nvim/lua/keymaps/init.lua
require('lazy_config')   -- ~/.config/nvim/lua/lazy_config/lazy_plugins.lua
------ ~/.config/nvim/lua/plugin_keymaps.lua
require('settings')      -- ~/.config/nvim/lua/settings.lua
require('keymaps.post')  -- ~/.config/nvim/lua/keymaps/post.lua

--local is_gui = vim.g.neovide or vim.g.neovim_qt or vim.g.goneovim
--
--if is_gui then
--  print("Neovim is running in a GUI!")
--else
--  print("Neovim is running in a terminal.")
--end
--
--vim.g.mapleader = " "
--vim.g.maplocalleader = "\\"
--local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
--if not (vim.uv or vim.loop).fs_stat(lazypath) then
--  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
--  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
--  if vim.v.shell_error ~= 0 then
--    vim.api.nvim_echo({
--      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
--      { out,                            "WarningMsg" },
--      { "\nPress any key to exit..." },
--    }, true, {})
--    vim.fn.getchar()
--    os.exit(1)
--  end
--end
--vim.opt.rtp:prepend(lazypath)
--require("lazy").setup({
--  spec = {
--    {
--      "jpalardy/vim-slime",
--      init = function()
--        -- these two should be set before the plugin loads
--        vim.g.slime_target = "neovim"
--        vim.g.slime_no_mappings = true
--      end,
--      config = function()
--        vim.g.slime_input_pid = false
--        vim.g.slime_suggest_default = true
--        vim.g.slime_menu_config = false
--        vim.g.slime_neovim_ignore_unlisted = false
--        -- options not set here are g:slime_neovim_menu_order, g:slime_neovim_menu_delimiter, and g:slime_get_jobid
--        -- see the documentation above to learn about those options
--
--        -- called MotionSend but works with textobjects as well
--        vim.keymap.set("n", "gz", "<Plug>SlimeMotionSend", { remap = true, silent = false })
--        vim.keymap.set("n", "gzz", "<Plug>SlimeLineSend", { remap = true, silent = false })
--        vim.keymap.set("x", "gz", "<Plug>SlimeRegionSend", { remap = true, silent = false })
--        vim.keymap.set("n", "gzc", "<Plug>SlimeConfig", { remap = true, silent = false })
--
--        vim.g.slime_get_jobid = function()
--         -- -- iterate over all buffers to find the first terminal with a valid job
--         -- for _, bufnr in ipairs(vim.api.nvim_list_bufs()) do
--         --   if vim.api.nvim_get_option_value('buftype',{buf = bufnr}) == "terminal" then
--         --     local chan = vim.api.nvim_buf_get_var(bufnr, "channel")
--         --     if chan and chan > 0 then
--         --       return chan
--         --     end
--         --   end
--         -- end
--         -- return nil
--        end
--
--      end,
--    } ,
--  },
--})
