#!/usr/bin/env python3
#
# Copyright (C) 2016 James Murphy
# Licensed under the GPL version 2 only
#
# A battery indicator blocklet script for i3blocks

from subprocess import check_output
import os
import re

config = dict(os.environ)
status = check_output(['acpi'], universal_newlines=True)

if not status:
    # No battery found: use a bright red for warning on dark background.
    battery_color = config.get("color_10", "#FF0000")
    fulltext = "<span color='{}'><span font='FontAwesome'>\uf00d \uf240</span></span>".format(battery_color)
    percentleft = 100
else:
    # Process battery status; support multiple batteries.
    batteries = status.split("\n")
    state_batteries = []
    commasplitstatus_batteries = []
    percentleft_batteries = []
    time = ""
    for battery in batteries:
        if battery != '':
            state_batteries.append(battery.split(": ")[1].split(", ")[0])
            commasplitstatus = battery.split(", ")
            if not time:
                time = commasplitstatus[-1].strip()
                # Extract time if it matches (hh:mm)
                time_match = re.match(r"(\d+):(\d+)", time)
                if time_match:
                    time = ":".join(time_match.groups())
                    timeleft = " ({})".format(time)
                else:
                    timeleft = ""
            p = int(commasplitstatus[1].rstrip("%\n"))
            if p > 0:
                percentleft_batteries.append(p)
            commasplitstatus_batteries.append(commasplitstatus)
    state = state_batteries[0]
    commasplitstatus = commasplitstatus_batteries[0]
    if percentleft_batteries:
        percentleft = int(sum(percentleft_batteries) / len(percentleft_batteries))
    else:
        percentleft = 0

    # Set a bright violet for charging indication on dark backgrounds.
    charging_color = "#9933cc"
    FA_LIGHTNING = "<span color='{}'><span font='FontAwesome'>\uf0e7</span></span>".format(charging_color)

    # Icon for plugged in state (default color used by font)
    FA_PLUG = "<span font='FontAwesome'>\uf1e6</span>"

    # Icon for using battery (default color used by font)
    FA_BATTERY = "<span font='FontAwesome'>\uf240</span>"

    # Icon for unknown battery status
    FA_QUESTION = "<span font='FontAwesome'>\uf128</span>"

    if state == "Discharging":
        fulltext = FA_BATTERY + " "
    elif state == "Full":
        fulltext = FA_PLUG + " "
        timeleft = ""
    elif state == "Unknown":
        fulltext = FA_QUESTION + " " + FA_BATTERY + " "
        timeleft = ""
    else:
        fulltext = FA_LIGHTNING + " " + FA_PLUG + " "

    def color(percent):
        # Bright colors that stand out on dark backgrounds.
        if percent < 10:
            return config.get("color_10", "#FF0000")   # Bright Red for critical level
        elif percent < 20:
            return config.get("color_20", "#FF4500")   # Orange Red
        elif percent < 30:
            return config.get("color_30", "#FF8C00")   # Dark Orange
        elif percent < 40:
            return config.get("color_40", "#FFA500")   # Orange
        elif percent < 50:
            return config.get("color_50", "#FFD700")   # Gold
        elif percent < 60:
            return config.get("color_60", "#FFFF00")   # Yellow
        elif percent < 70:
            return config.get("color_70", "#ADFF2F")   # Green Yellow
        elif percent < 80:
            return config.get("color_80", "#7CFC00")   # Lawn Green
        else:
            return config.get("color_full", "#00FF00")   # Bright Green for full charge

    form = '<span color="{}">{}%</span>'
    fulltext += form.format(color(percentleft), percentleft)
    # Optionally, include the time remaining: fulltext += timeleft

print(fulltext)
print(fulltext)
if percentleft < 10:
    exit(33)
