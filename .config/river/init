#!/bin/sh
#
# ~/.config/river/init
# This script is run once river’s Wayland server is up, before entering the main loop.
# Use this to:
#   • Configure outputs (replacing xrandr calls)
#   • Set your keybindings via riverctl
#   • Launch programs (status bar, compositor, background, etc.)
#   • Export any env vars (GTK_THEME, QT_QPA_PLATFORMTHEME, etc.)
#

# 1) Export environment variables
export GTK_THEME=Arc-Dark
export QT_STYLE_OVERRIDE=adwaita
export QT_QPA_PLATFORMTHEME=qt5ct

# 2) Set up outputs (Wayland-native, see next section)
#    → We’ll show how to replicate your dual_monitor.sh logic using `wlr-randr`

# In ~/.config/river/init (inside the script)
#
# 1) Detect if your external DisplayPort outputs are connected.
#    For simplicity, instead of grepping, you can just try to set them; if not present, wlr-randr will ignore them.

# If you want conditional logic, you can do:
if ! wlr-randr --output DisplayPort-10 --list-available >/dev/null 2>&1; then
  # No external DP at all: leave eDP at its default or explicitly set it
  wlr-randr --output eDP --mode 1366x768 --transform normal
else
  # External displays detected → apply the two-monitor layout.

  # 1. Force eDP at 1024×768 (replace “–pos” with “--transform normal”; Wayland doesn’t use X/Y pos the same way;
  #    instead you instruct wlr-randr how to place them in a single framebuffer)
  # 2. Turn off DP-0, DP-1, … etc (wlr-randr will interpret --off)
  # 3. Place DP-10 at 1920×1080, rotated left, positioned to the left of eDP (since left = “--transform 90”)
  # 4. Place DP-12 at 1920×1080 as primary, positioned to the right (transform normal).

  wlr-randr \
    --output eDP --mode 1024x768 --pos 1159x1265 --rotate 0 \
    --output DisplayPort-0 --off \
    --output DisplayPort-1 --off \
    --output DisplayPort-2 --off \
    --output DisplayPort-3 --off \
    --output DisplayPort-4 --off \
    --output DisplayPort-5 --off \
    --output DisplayPort-6 --off \
    --output DisplayPort-7 --off \
    --output DisplayPort-8 --off \
    --output DisplayPort-9 --off \
    --output DisplayPort-10 --mode 1920x1080 --pos 0x0 --rotate 90 \
    --output DisplayPort-11 --off \
    --output DisplayPort-12 --mode 1920x1080 --pos 1080x185 --rotate 0 --primary
fi



# In ~/.config/river/init, after outputs:
# Install swayidle & swaylock from the repos; then:
swayidle \
  timeout 1200 'swaylock -f' \
  resume 'swaymsg "seat0 disable_idle"' \
  before-sleep 'swaylock -f'




# Use `wlr-kbselect` or put in ~/.config/river/init:
seatctl -S 200 50   # for 25 repeats/sec with 30 ms delay  (‘seatctl’ is part of wlroots tools)



riverctl set-cursor-theme left_ptr 24

setxkbmap -layout us -variant mac -option "ctrl:nocaps"

riverctl map normal None Prior spawn ~/.config/i3/endeavour_untouched/scripts/volume_brightness.sh volume_up
riverctl map normal None Next  spawn ~/.config/i3/endeavour_untouched/scripts/volume_brightness.sh volume_down

# 3) Launch background/scroll keys, status bar, etc.
#    → Instead of picom under X11, you might NOT need it (Wayland has no “compositor” in the same sense).
#    → If you rely on a tray or notification daemon, launch it here.

# 4) Configure keybindings / modes with riverctl (mapping keys)
#    → We’ll translate your i3 binds to riverctl commands.

# In ~/.config/river/init, after exports and output config:

# Enter “normal” mode (default); we map keys in that mode.

# Bind Super+1 .. Super+9 to focus tags 1..9
riverctl map normal Mod4 1 set-focused-tags 1     # binary 000000001
riverctl map normal Mod4 2 set-focused-tags 2     # binary 000000010
riverctl map normal Mod4 3 set-focused-tags 4     # binary 000000100
riverctl map normal Mod4 4 set-focused-tags 8     # binary 000001000
riverctl map normal Mod4 5 set-focused-tags 16    # binary 000010000
riverctl map normal Mod4 6 set-focused-tags 32    # binary 000100000
riverctl map normal Mod4 7 set-focused-tags 64    # binary 001000000
riverctl map normal Mod4 8 set-focused-tags 128   # binary 010000000
riverctl map normal Mod4 9 set-focused-tags 256   # binary 100000000

# Move the focused view into a different tag:
riverctl map normal Mod4+Shift 1 toggle-view-tags 1
riverctl map normal Mod4+Shift 2 toggle-view-tags 2
riverctl map normal Mod4+Shift 3 toggle-view-tags 4
riverctl map normal Mod4+Shift 4 toggle-view-tags 8
riverctl map normal Mod4+Shift 5 toggle-view-tags 16
riverctl map normal Mod4+Shift 6 toggle-view-tags 32
riverctl map normal Mod4+Shift 7 toggle-view-tags 64
riverctl map normal Mod4+Shift 8 toggle-view-tags 128
riverctl map normal Mod4+Shift 9 toggle-view-tags 256

# “Next” / “Previous” workspace (cycle tags):
riverctl map normal Mod4+Tab focus-previous-tags
riverctl map normal Mod4+Shift+Tab focus-previous-tags

# Send focused view to the next/previous output (maintaining tags):
riverctl map normal Mod4+Ctrl+l send-to-output previous --current-tags
riverctl map normal Mod4+Ctrl+h send-to-output next --current-tags

# Focus outputs directionally:
riverctl map normal Mod4+Mod1+h focus-output left
riverctl map normal Mod4+Mod1+l focus-output right
riverctl map normal Mod4+Mod1+j focus-output down
riverctl map normal Mod4+Mod1+k focus-output up


seatctl set-keyboard-repeat 200 30

riverctl map normal Mod4+Shift e exit

# sudo systemctl enable --now seatd

# 5) Launch any auto-started applications (e.g. nm-applet replacement, rofi, gtk menus)
#    → Under Wayland, you might use waybar + nm-applet
#    → If you still want a tray icon for network, use a Wayland-compatible tray (like gb-tray or nm-applet under Xwayland).
waybar &
# 6) (Optional) Start a layout generator like rivertile:
rivertile &
