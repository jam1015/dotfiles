#!/usr/bin/env zsh
# Personal Zsh Configuration
# This file is sourced after oh-my-zsh
bindkey -v
# ============================================================================
# EARLY INITIALIZATION
# ============================================================================

# Create necessary directories
[[ -d ~/.local/state/zsh ]] || mkdir -p ~/.local/state/zsh
[[ -d ~/.local/bin ]] || mkdir -p ~/.local/bin
[[ -d ~/.npm-global/bin ]] || mkdir -p ~/.npm-global/bin

# Load completions
autoload -Uz compinit && compinit -i

# ============================================================================
# ENVIRONMENT VARIABLES
# ============================================================================

# Path configuration (do this once at the top)
typeset -U path  # Ensure unique entries in PATH
path=(
    $HOME/.local/bin
    $HOME/.npm-global/bin
    $path
)
export PATH

# Core environment variables
export TERMINAL="kitty"
export EDITOR="nvim"
export BROWSER="/usr/bin/firefox-developer-edition"
export GPG_TTY=$(tty)

# Platform-specific settings
case "$OSTYPE" in
    darwin*)
        export VISUAL='/usr/local/bin/nvim --cmd "let g:flatten_allow_nesting = v:true"'
        # Add Homebrew paths if they exist
        [[ -d /opt/homebrew/bin ]] && path=(/opt/homebrew/bin $path)
        ;;
    linux*)
        export VISUAL="$HOME/.visual_editor.bash"
        export XDG_SESSION_TYPE=wayland
        export wm="i3"
        ;;
esac

# Vim/Neovim configuration
export VIMCONFIG=~/.config/nvim
export VIMDATA=~/.local/share/nvim
export NVIM_SWAP="$HOME/.local/state/nvim/swap"
export DOOMDIR='~/.doomemacs-config'

# Quick access paths
export vimrc="$HOME/dotfiles/.config/nvim/init.lua"
export zshrc="$HOME/dotfiles/.zshrc_personal"
export emacsc="$HOME/.emacs.default/init.el"

# Git configuration
export GCM_CREDENTIAL_STORE="cache"

# Document directories
export tododir="$HOME/Documents/todo/"
export diaries="$HOME/Documents/diaries/"
export diaries_thoughts="${diaries}diaries_thoughts.md"
export diaries_todo="${diaries}to_do_short.md"
export diaries_plans="${diaries}to_do_long.md"
export diaries_memories="${diaries}diaries_memories.md"
export diaries_musings="${diaries}thoughts_unstructured.md"
export diaries_affirmations="${diaries}affirmations.md"
export diaries_dreams="${diaries}diaries_dreams.md"
export diaries_events="${diaries}diaries_events.md"

# FZF configuration
if command -v fzf >/dev/null 2>&1; then
    export FZF_DEFAULT_COMMAND='fd --hidden --type f --color=never'
    export FZF_ALT_C_COMMAND='fd --hidden --type d . --color=never'
fi

# ============================================================================
# SHELL OPTIONS
# ============================================================================

setopt PROMPT_SUBST        # Enable prompt substitution
setopt NO_AUTO_PUSHD       # Don't automatically push directories
setopt HIST_IGNORE_DUPS    # Don't record duplicate commands
setopt HIST_FIND_NO_DUPS   # Don't show duplicates in search
setopt SHARE_HISTORY       # Share history between sessions
setopt EXTENDED_HISTORY    # Record timestamp in history

# History configuration
HISTSIZE=100000
SAVEHIST=100000
HISTFILE=~/.zhistory

# ============================================================================
# KEY BINDINGS
# ============================================================================

# Use vi mode but with some emacs bindings
KEYTIMEOUT=1  # Reduce mode switch delay

# Useful emacs-style bindings even in vi mode
bindkey '^R' history-incremental-pattern-search-backward
#bindkey '^A' beginning-of-line
#bindkey '^E' end-of-line
#bindkey '^K' kill-line
#bindkey '^W' backward-kill-word

# Remove some bindings
bindkey -r '^[x' 2>/dev/null
bindkey -a -r ':' 2>/dev/null

# ============================================================================
# ALIASES
# ============================================================================

# Editor aliases (simplified and consistent)
if command -v nvim >/dev/null 2>&1; then
    alias vi='nvim'
    alias vim='nvim'
    alias vin='nvim --cmd "let g:flatten_allow_nesting = v:true"'
    export MANPAGER='nvim --clean -c Man! -u ~/.man_nvimrc'
fi

# Emacs aliases
if command -v emacs >/dev/null 2>&1; then
    alias vid='emacs --with-profile doom'
    alias vie='emacsclient -nw'
    alias ec='emacsclient -nc'
fi

# Platform-specific aliases
case "$OSTYPE" in
    darwin*)
        alias ls='ls -G'
        alias ll='ls -lG'
        # Override vim with MacVim if available
        command -v mvim >/dev/null 2>&1 && alias vim="mvim -v"
        ;;
    linux*)
        alias ls='ls --color=auto'
        alias ll='ls -l --color=auto'
        ;;
esac

# General aliases
alias cb='clipboard'
alias pd='pandoc'
alias pdflatex='pdflatex -synctex=1'
alias ptpython='ptpython --vi --dark-bg'
alias catscripts="~/.scripts/cat-scripts.bash"

# Lua language server (check if exists first)
[[ -x ~/Documents/lua-language-server/3rd/luamake/luamake ]] && \
    alias luamake='~/Documents/lua-language-server/3rd/luamake/luamake'

# ============================================================================
# FUNCTIONS
# ============================================================================

# Directory creation and navigation
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Cheat.sh integration
cheat() {
    curl -s "cheat.sh/$1"
}

# Find in files using ripgrep and fzf
fif() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: fif <search_string>"
        return 1
    fi

    local search_string="$1"
    
    if ! command -v rg >/dev/null 2>&1; then
        echo "Error: ripgrep (rg) is not installed"
        return 1
    fi
    
    if ! command -v fzf >/dev/null 2>&1; then
        echo "Error: fzf is not installed"
        return 1
    fi

    rg --files-with-matches --no-messages "$search_string" | \
        fzf --preview "rg --ignore-case --pretty --context 10 '$search_string' {}"
}

# ============================================================================
# PROMPT CONFIGURATION
# ============================================================================

# VCS info setup
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git svn hg
zstyle ':vcs_info:git*' formats "âŽ‡ %b"

# Vi mode indicators
vim_ins_mode=">"
vim_cmd_mode="%%"
vim_mode=$vim_ins_mode

function zle-keymap-select {
    vim_mode="${${KEYMAP/vicmd/${vim_cmd_mode}}/(main|viins)/${vim_ins_mode}}"
    zle reset-prompt
}
zle -N zle-keymap-select

function zle-line-finish {
    vim_mode=$vim_ins_mode
}
zle -N zle-line-finish

# Prompt setup using zsh color codes
# Load colors module
autoload -U colors && colors

if [[ "$EUID" = 0 ]]; then
  PS1='%B%F{green}%M:su:%3~%f%b${vcs_info_msg_0_}%B%F{green}${vim_mode}%f%b '
else
  PS1='%F{magenta}%B%M:%3~%f%b${vcs_info_msg_0_}%F{magenta}${vim_mode}%f '
fi

# ============================================================================
# HOOKS
# ============================================================================

# Function to update VCS info
precmd_vcs_info() {
    vcs_info
}

# Track current directory for other shells/tmux
precmd_save_cwd() {
    echo "$PWD" > ~/.local/state/zsh/whereami
}

# Set OLDPWD for compatibility
precmd_setpwd() {
    OLDPWD=$PWD
    export OLDPWD
    PWD=$(pwd)
    export PWD
}

# Register precmd hooks
precmd_functions+=(
    precmd_vcs_info
    precmd_save_cwd
    precmd_setpwd
)

# ============================================================================
# OPTIONAL INTEGRATIONS
# ============================================================================

# Zoxide (better cd)
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init --cmd cd zsh)"
fi

# ============================================================================
# LAUNCHER MODE (if needed)
# ============================================================================

if [[ $ZSH_LAUNCHER = 1 ]]; then
  # Set cyan prompt for launcher mode
  if [[ "$EUID" = 0 ]]; then
    PS1='%B%F{cyan}%M:su:%3~%f%b${vcs_info_msg_0_}%B%F{cyan}${vim_mode}%f%b '
  else
    PS1='%F{cyan}%B%M:%3~%f%b${vcs_info_msg_0_}%F{cyan}${vim_mode}%f '
  fi
  preexec() { (eval "$1" &) &>/dev/null
    exit
  }
fi


dt() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: detach <command> [arguments...]"
        return 1
    fi

    # Run command in background, redirect output, and disown
    nohup "$@" >/dev/null 2>&1 &!

    # Optional: notify user
    echo "Detached: $1 (PID: $!)"
}
compdef _precommand dt

# ============================================================================
# ZSH COMPLETION CONFIGURATION
# ============================================================================

# Optional: Override config flags before sourcing
# export ZSH_COMPLETION_VERBOSE_MISSING=false
# export ZSH_ENABLE_AUTOSUGGESTIONS=true
# export ZSH_ENABLE_SYNTAX_HIGHLIGHTING=true

# Source completion configuration
if [[ -f "$HOME/.config/zsh/completion.zsh" ]]; then
    source "$HOME/.config/zsh/completion.zsh"
else
    echo "Warning: ~/.config/zsh/completion.zsh not found"
fi

source ~/.config/zsh/completion.zsh






# ============================================================================
# FINAL MESSAGE
# ============================================================================

# Only show this in interactive shells
[[ -o interactive ]] && echo ".zshrc loaded successfully"
